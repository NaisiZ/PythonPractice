File Handling:
Python provides the facility of working on Files. A File is an external storage on hard disk from
where data can be stored and retrieved.
Operations on Files:
1) Opening a File: Before working with Files you have to open the File. To open a File, Python
built in function open( ) is used. It returns an object of File which is used with other functions.
Having opened the file now you can perform read, write, etc. operations on the File.
Syntax:
obj =open(filename , mode , buffer)
here,
filename: It is the name of the file which you want to access.
mode: It specifies the mode in which File is to be opened. There are many types of mode. Mode
depends the operation to be performed on File. Default access mode is read.
2) Closing a File:Once you are finished with the operations on File at the end you need to close
the file. It is done by the close( ) method. close( ) method is used to close a File.
Syntax:
fileobject.close( )
3) Writing to a File:write( ) method is used to write a string into a file.
Syntax:
fileobject.write(string str)
4) Reading from a File: read( ) method is used to read data from the File.
Syntax:
fileobject.read(value)
here, value is the number of bytes to be read. In case, no value is given it reads till end of file is
reached.
Program to read and write data from a file.
obj=open("abcd.txt","w")
obj.write("Welcome to the world of Python")
obj.close( )
obj1=open("abcd.txt","r")
s=obj1.read( )
print s
obj1.close( )
obj2=open("abcd.txt","r")
s1=obj2.read(20)
print s1
obj2.close( )
Output:
>>>
Welcome to the world of Python
Welcome to the world
>>>

Attributes of File:
There are following File attributes.
Attribute Description
Name Returns the name of the file.
Mode Returns the mode in which file is being opened.
Closed Returns Boolean value. True, in case if file is closed else false.
Example1:
obj = open("data.txt", "w")
print obj.name
print obj.mode
print obj.closed
Output:
>>>
data.txt
w
False
>>>

Example2:
HariBabu@Siri ~
$ vi data1.txt
HariBabu@Siri ~
$ cat data1.txt
obj = open("data.txt", "w")
obj.close()
print obj.name
print obj.mode
print obj.closed
HariBabu@Siri ~
$ python data1.txt
data.txt
w
True

Modes of File:
There are different modes of file in which it can be opened. They are mentioned in the following
table.A file can be opened in two modes.
1) Text Mode.
2) Binary Mode.
Mode Description
R It opens in Reading mode. It is default mode of File. Pointer is at beginning of the file.
rb It opens in Reading mode for binary format. It is the default mode. Pointer is at
beginning of file.
r+ Opens file for reading and writing. Pointer is at beginning of file.
rb+ Opens file for reading and writing in binary format. Pointer is at beginning of file.
W Opens file in Writing mode. If file already exists, then overwrite the file else create a
new file.
wb Opens file in Writing mode in binary format. If file already exists, then overwrite the
file else create a new file.
w+ Opens file for reading and writing. If file already exists, then overwrite the file else
create a new file.
wb+ Opens file for reading and writing in binary format. If file already exists, then
overwrite the file else create a new file.
a Opens file in Appending mode. If file already exists, then append the data at the end
of existing file, else create a new file.
ab Opens file in Appending mode in binary format. If file already exists, then append the
data at the end of existing file, else create a new file.
a+ Opens file in reading and appending mode. If file already exists, then append the data
at the end of existing file, else create a new file.
ab+ Opens file in reading and appending mode in binary format. If file already exists, then
append the data at the end of existing file, else create a new file.
CS385L â€“ Unix/Linux Shell and Python Scripting Lab
Hari Babu Boppudi Page 10
Methods:
There are many methods related to File Handling. They are given in the following table:
There is a module "os" defined in Python that provides various functions which are used to
perform various operations on Files. To use these functions 'os' needs to be imported.
Method Description
rename() It is used to rename a file. It takes two arguments, existing_file_name and
new_file_name.
remove() It is used to delete a file. It takes one argument. Pass the name of the file which
is to be deleted as the argument of method.
mkdir() It is used to create a directory. A directory contains the files. It takes one
argument which is the name of the directory.
chdir() It is used to change the current working directory. It takes one argument which is
the name of the directory.
getcwd() It gives the current working directory.
rmdir() It is used to delete a directory. It takes one argument which is the name of the
directory.
tell() It is used to get the exact position in the file.
1) rename( ):
Syntax:
os.rename(existing_file_name, new_file_name)
eg:
import os
os.rename('data.txt','harry.txt')

2) remove( ):
Syntax:
os.remove(file_name)
eg:
import os
os.remove('harry.txt')

3) mkdir()
Syntax:
os.mkdir("file_name")
eg:
import os
os.mkdir("new")

4) chdir()
Syntax:
os.chdir("file_name")
eg:
import os
os.chdir("xyz")

5) getcwd()
Syntax:
os.getcwd()
eg:

import os
print os.getcwd()
6) rmdir()
Syntax:
os.rmdir("directory_name)
eg:
import os
os.rmdir("new")
